{"version":3,"sources":["pages/Notes.page.js","pages/Create.page.js","pages/Detail.page.js","context/AuthContext.js","pages/Auth.page.js","hooks/message.hook.js","hooks/http.hook.js","components/Navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["NotesPage","CreatePage","DetailPage","AuthContext","createContext","token","userId","login","noop","logout","isAuthenticated","AuthPage","auth","useContext","message","useCallback","text","window","M","toast","html","useState","loading","setLoading","error","setError","request","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","clearError","useHttp","email","password","form","setForm","useEffect","updateTextFields","changeHandler","event","target","name","value","registerHandler","console","log","loginHandler","className","placeholder","id","type","onChange","htmlFor","style","marginRight","disabled","onClick","Navbar","history","useHistory","padding","to","href","preventDefault","push","App","setToken","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qOAEaA,EAAY,WACrB,OACI,6BACI,2CCHCC,EAAa,WACtB,OACI,6BACI,4CCHCC,EAAa,WACtB,OACI,6BACI,4C,oDCDL,IAAMC,EAAcC,wBAAc,CACrCC,MAAM,KACNC,OAAO,KACPC,WAAMC,EACNC,YAAOD,EACPE,iBAAgB,ICJPC,EAAW,WACpB,IAAMC,EAAOC,qBAAWV,GAClBW,ECJCC,uBAAY,SAAAC,GACZC,OAAOC,GAAKF,GACXC,OAAOC,EAAEC,MAAM,CAACC,KAAKJ,MAE3B,IDFwB,EEFP,WAAO,IAAD,EACIK,oBAAS,GADb,mBAClBC,EADkB,KACVC,EADU,OAEAF,mBAAS,MAFT,mBAElBG,EAFkB,KAEZC,EAFY,KA0BzB,MAAM,CAACH,UAAQI,QAvBCX,sBAAW,uCAAE,WAAOY,GAAP,mCAAAC,EAAA,6DAAWC,EAAX,+BAAmB,MAAMC,EAAzB,+BAA8B,KAAKC,EAAnC,+BAA2C,GACpER,GAAW,GADc,SAGlBO,IACCA,EAAME,KAAKC,UAAUH,GACrBC,EAAQ,gBAAkB,oBALT,SAOEG,MAAMP,EAAI,CAACE,SAAOC,OAAKC,YAPzB,cAOfI,EAPe,iBAQFA,EAASC,OARP,WAQfC,EARe,OASjBF,EAASG,GATQ,uBAUX,IAAIC,MAAMF,EAAKvB,SAAU,kGAVd,eAarBS,GAAW,GAbU,kBAcdc,GAdc,wCAgBrBd,GAAW,GACXE,EAAS,KAAEX,SAjBU,+DAAF,sDAoBzB,IAGqBU,QAAMgB,WADVzB,uBAAY,kBAAMU,EAAS,QAAM,KFpBTgB,GAApCnB,EAHmB,EAGnBA,QAAQE,EAHW,EAGXA,MAAME,EAHK,EAGLA,QAAQc,EAHH,EAGGA,WAHH,EAIHnB,mBAAS,CAC5BqB,MAAM,GAAGC,SAAS,KALI,mBAInBC,EAJmB,KAIdC,EAJc,KAQ1BC,qBAAU,WACNhC,EAAQU,GACRgB,MACF,CAAChB,EAAMV,EAAQ0B,IAEjBM,qBAAU,WACN7B,OAAOC,EAAE6B,qBACX,IAEF,IAAMC,EAAgB,SAAAC,GAClBJ,EAAQ,eAAID,EAAL,eAAWK,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,UAGhDC,EAAe,uCAAG,4BAAAzB,EAAA,+EAEGF,EAAS,qBAAqB,OAAvB,eAAkCkB,IAF5C,OAEVP,EAFU,OAGhBvB,EAAQuB,EAAKvB,SACbwC,QAAQC,IAAI,OAAOlB,GAJH,yGAAH,qDAUfmB,EAAY,uCAAG,4BAAA5B,EAAA,+EAEMF,EAAS,kBAAkB,OAApB,eAA+BkB,IAF5C,OAEPP,EAFO,OAGbzB,EAAKL,MAAM8B,EAAKhC,MAAMgC,EAAK/B,QAHd,uGAAH,qDASlB,OACI,yBAAKmD,UAAU,OACX,yBAAKA,UAAU,oBACX,uCACA,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,2BACf,0BAAMA,UAAU,cAAhB,sEACA,6BACI,yBAAKA,UAAU,eACX,2BACAA,UAAU,eACVC,YAAY,mDACZC,GAAG,QACHC,KAAK,OACLT,KAAO,QACPU,SAAUb,IAEV,2BAAOc,QAAQ,SAAf,UAEJ,yBAAKL,UAAU,eACX,2BACAA,UAAU,eACVC,YAAY,kFACZC,GAAG,WACHC,KAAK,WACLT,KAAK,WACLU,SAAUb,IAEV,2BAAOc,QAAQ,YAAf,2CAIR,yBAAKL,UAAU,eACX,4BACAA,UAAU,sBACVM,MAAO,CAACC,YAAY,IACpBC,SAAU3C,EACV4C,QAASV,GAJT,kCAQA,4BACAC,UAAU,gCACVS,QAASb,EACTY,SAAU3C,GAHV,2EGlFX6C,EAAS,WAClB,IAAMC,EAAUC,cACVzD,EAAOC,qBAAWV,GAOxB,OACI,6BACI,yBAAKsD,UAAU,4BAA4BM,MAAO,CAACO,QAAQ,YACvD,sCAAMb,UAAU,KAAhB,YAA8B,cAA9B,WACA,wBAAIE,GAAG,aAAaF,UAAU,8BAC1B,4BAAI,kBAAC,IAAD,CAASc,GAAG,WAAZ,+CACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,+CACJ,4BAAI,uBAAGC,KAAK,IAAIN,QAZV,SAAAjB,GAClBA,EAAMwB,iBACN7D,EAAKH,SACL2D,EAAQM,KAAK,OASG,uCCMTC,MAlBf,WAAgB,IAAD,ECJQ,WAAO,IAAD,EACCtD,mBAAS,MADV,mBAClBhB,EADkB,KACXuE,EADW,OAEEvD,mBAAS,MAFX,mBAElBf,EAFkB,KAEXuE,EAFW,KAInBtE,EAAQQ,uBAAY,SAAC+D,EAASnB,GAChCiB,EAASE,GACTD,EAAUlB,GAEVoB,aAAaC,QAVD,WAUqBhD,KAAKC,UAAU,CAC5C3B,OAAOqD,EAAGtD,MAAMyE,OAEtB,IAGIrE,EAASM,uBAAY,WACvB6D,EAAS,MACTC,EAAU,MACVE,aAAaE,WAnBD,cAoBd,IAUF,OARAnC,qBAAU,WACN,IAAMT,EAAOL,KAAKkD,MAAMH,aAAaI,QAvBzB,aAyBT9C,GAAQA,EAAKhC,OACZE,EAAM8B,EAAKhC,MAAMgC,EAAK/B,UAE5B,CAACC,IAEI,CAACA,QAAME,SAAOJ,QAAMC,UDvBO8E,GAA7B/E,EADM,EACNA,MAAME,EADA,EACAA,MAAME,EADN,EACMA,OAAOH,EADb,EACaA,OACpBI,IAAoBL,EACpBgF,EEJiB,SAAA3E,GACrB,OAAGA,EAEK,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4E,KAAO,SAASC,OAAK,GACxB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,KAAO,UAAUC,OAAK,GACzB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,KAAO,WACV,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAUf,GAAG,aAMrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOe,KAAK,IAAIC,OAAK,GACjB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAUhB,GAAG,OFnBRiB,CAAU9E,GACzB,OACE,kBAACP,EAAYsF,SAAb,CAAsBrC,MAAQ,CAC5B/C,QAAME,QAAME,SAAOH,SAAOI,oBAE1B,kBAAC,IAAD,KACGA,GAAmB,kBAAC,EAAD,MACpB,yBAAK+C,UAAU,aACZ4B,MGPSK,QACW,cAA7BzE,OAAO0E,SAASC,UAEe,UAA7B3E,OAAO0E,SAASC,UAEhB3E,OAAO0E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhF,GACL8B,QAAQ9B,MAAMA,EAAMV,c","file":"static/js/main.60d9c257.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const NotesPage = () => {\r\n    return (\r\n        <div>\r\n            <h1>NotesPage</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const CreatePage = () => {\r\n    return (\r\n        <div>\r\n            <h1>CreatePage</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const DetailPage = () => {\r\n    return (\r\n        <div>\r\n            <h1>DetailPage</h1>\r\n        </div>\r\n    )\r\n}","import {createContext} from 'react'\r\n\r\nfunction noop(){}\r\n\r\nexport const AuthContext = createContext({\r\n    token:null,\r\n    userId:null,\r\n    login:noop(),\r\n    logout:noop(),\r\n    isAuthenticated:false\r\n})","import React ,{useState, useEffect, useContext}from 'react'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { useMessage } from '../hooks/message.hook'\r\nimport { AuthContext } from '../context/AuthContext'\r\n\r\nexport const AuthPage = () => {\r\n    const auth = useContext(AuthContext)\r\n    const message = useMessage()\r\n    const {loading,error,request,clearError} = useHttp()\r\n    const [form,setForm] = useState({\r\n        email:'',password:''\r\n    })\r\n\r\n    useEffect(() =>{\r\n        message(error)\r\n        clearError()\r\n    },[error,message,clearError])\r\n\r\n    useEffect(() =>{\r\n        window.M.updateTextFields()\r\n    },[])\r\n\r\n    const changeHandler = event => {\r\n        setForm({...form,[event.target.name]:event.target.value})\r\n    }\r\n\r\n    const registerHandler = async () =>{\r\n        try {\r\n            const data = await request ('/api/auth/register','POST',{...form})\r\n            message(data.message)\r\n            console.log(\"DATA\",data)\r\n        } catch (e) {\r\n            \r\n        }\r\n    }\r\n\r\n    const loginHandler = async () =>{\r\n        try {\r\n            const data = await request ('/api/auth/login','POST',{...form})\r\n            auth.login(data.token,data.userId)\r\n        } catch (e) {\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s6 offset-s3\">\r\n                <h1>AdminKa</h1>\r\n                <div className=\"card blue darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                    <span className=\"card-title\">Авторизация</span>\r\n                    <div>\r\n                        <div className=\"input-field\">\r\n                            <input \r\n                            className=\"yellow-input\"\r\n                            placeholder=\"Введите email\"\r\n                            id=\"email\" \r\n                            type=\"text\"\r\n                            name = \"email\"\r\n                            onChange={changeHandler}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input\r\n                            className=\"yellow-input\" \r\n                            placeholder=\"Введите пароль\" \r\n                            id=\"password\" \r\n                            type=\"password\" \r\n                            name=\"password\"\r\n                            onChange={changeHandler}\r\n                            />\r\n                            <label htmlFor=\"password\">Пароль</label>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                        <button \r\n                        className=\"btn yellow darken-4\" \r\n                        style={{marginRight:15}}\r\n                        disabled={loading}\r\n                        onClick={loginHandler}\r\n                        >\r\n                            Войти\r\n                            </button>\r\n                        <button \r\n                        className=\"btn grey lighten-1 black-text\"\r\n                        onClick={registerHandler}\r\n                        disabled={loading}\r\n                        >\r\n                            Регистрация\r\n                            </button>\r\n                     </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () =>{\r\n    return useCallback(text => {\r\n        if(window.M && text){\r\n            window.M.toast({html:text})\r\n        }\r\n    },[])\r\n}","import {useState,useCallback} from 'react'\r\nimport { set } from 'mongoose'\r\n\r\nexport const useHttp = () => {\r\n    const [loading,setLoading] = useState(false)\r\n    const [error,setError] = useState(null)\r\n    const request = useCallback( async (url,method ='GET',body=null,headers={}) => {\r\n        setLoading(true)\r\n        try{\r\n            if(body){\r\n                body= JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n            const response = await fetch(url,{method,body,headers})\r\n            const data = await response.json()\r\n            if(!response.ok){\r\n                throw new Error(data.message ||'Что-то пошло не так')\r\n            }\r\n\r\n            setLoading(false)\r\n            return data\r\n        }catch(e){\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    },[])\r\n\r\n    const clearError = useCallback(() => setError(null),[]) \r\n    return{loading,request,error,clearError}\r\n}","import React,{useContext} from 'react'\r\nimport {NavLink,useHistory} from 'react-router-dom'\r\nimport { AuthContext } from '../context/AuthContext'\r\n\r\nexport const Navbar = () =>{\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n\r\n    const logoutHandler = event => {\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/')\r\n    }\r\n    return(\r\n        <nav>\r\n            <div className=\"nav-wrapper blue darken-1\" style={{padding:'0 2 rem'}}>\r\n                <span className=\"/\" className=\"brand-logo\">AdminKa</span>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li><NavLink to=\"/create\">Создать</NavLink></li>\r\n                    <li><NavLink to=\"/notes\">Заметки</NavLink></li>\r\n                    <li><a href=\"/\" onClick={logoutHandler}>Выйти</a></li>\r\n\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport 'materialize-css'\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/AuthContext';\nimport { Navbar } from './components/Navbar';\n\nfunction App() {\n  const {token,login,logout,userId} = useAuth()\n  const isAuthenticated = !!token\n  const routes = useRoutes(isAuthenticated)\n  return (\n    <AuthContext.Provider value ={{\n      token,login,logout,userId,isAuthenticated\n    }}>\n      <Router>\n        {isAuthenticated && <Navbar/>}\n        <div className=\"container\">\n          {routes}\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import {useState,useCallback, useEffect} from 'react'\r\n\r\nconst StorageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n    const [token ,setToken] = useState(null)\r\n    const [userId,setUserId] = useState(null)\r\n\r\n    const login = useCallback((jwtToken,id) => {\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n\r\n        localStorage.setItem(StorageName,JSON.stringify({\r\n            userId:id,token:jwtToken\r\n        }))\r\n    },[])\r\n\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        localStorage.removeItem(StorageName)\r\n    },[])\r\n\r\n    useEffect(() =>{\r\n        const data = JSON.parse(localStorage.getItem(StorageName))\r\n\r\n        if(data && data.token){\r\n            login(data.token,data.userId)\r\n        }\r\n    },[login])\r\n\r\n    return {login,logout,token,userId}\r\n}","import React from 'react'\r\nimport {Switch,Route, Redirect} from 'react-router-dom'\r\nimport {NotesPage} from './pages/Notes.page'\r\nimport {CreatePage} from './pages/Create.page'\r\nimport {DetailPage} from './pages/Detail.page'\r\nimport { AuthPage } from './pages/Auth.page'\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n    if(isAuthenticated){\r\n        return(\r\n            <Switch>\r\n                <Route path = '/Notes' exact>\r\n                    <NotesPage/>\r\n                </Route>\r\n                <Route path = '/Create' exact>\r\n                    <CreatePage/>\r\n                </Route>\r\n                <Route path = '/Detail'>\r\n                    <DetailPage/>\r\n                </Route>\r\n                <Redirect to='/Create'/>\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path='/' exact>\r\n                <AuthPage/>\r\n            </Route>\r\n            <Redirect to='/'/>\r\n        </Switch>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}